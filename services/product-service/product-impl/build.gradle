java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'
    implementation 'org.springframework:spring-tx'

    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    implementation 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    implementation project(':services:product-service:product-api')

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'org.liquibase:liquibase-core'

}

tasks.withType(JavaCompile) {
    options.annotationProcessorPath = configurations.annotationProcessor
    options.compilerArgs = ['-Amapstruct.defaultComponentModel=spring']
}


tasks.register('copyMigrations', Copy) {
    from project(':services:product-service:product-db').file('db')
    into "${layout.buildDirectory.dir("resources/test").get()}/db"
}

tasks.named('test') {
    dependsOn copyMigrations
    useJUnitPlatform()
}

configurations.configureEach {
    resolutionStrategy {
        force 'org.apache.commons:commons-text:1.12.0'
    }
}
